const express = require('express');
const puppeteer = require('puppeteer');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const cors = require('cors');

const app = express();
const port = 4001;

app.use(express.json());
app.use(cors());

const dbPath = path.join(__dirname, '../SQLite/SQLite/database.db');
console.log('üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err.message);
    else console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
});

let isChecking = false;

function getInstagram(username) {
    return new Promise((resolve, reject) => {
        db.get('SELECT instagram FROM users WHERE username = ?', [username], (err, row) => {
            if (err) return reject('SQLite –æ—à–∏–±–∫–∞: ' + err.message);
            if (!row) return reject('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + username);
            if (!row.instagram) return reject('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Instagram: ' + username);
            resolve(row.instagram);
        });
    });
}

async function checkIfUserFollows(referrerInstagram, targetInstagram) {
    console.log('\nüü° –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();

    try {
        const cookies = JSON.parse(fs.readFileSync('cookies.json', 'utf-8'));
        await page.setCookie(...cookies);
        await page.goto('https://www.instagram.com/', { waitUntil: 'networkidle2' });
        console.log('üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

        const url = `https://www.instagram.com/${referrerInstagram}/`;
        console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${url}`);
        await page.goto(url, { waitUntil: 'networkidle2' });

        await page.waitForSelector('a[href$="/followers/"]', { timeout: 30000 });
        await page.click('a[href$="/followers/"]');

        console.log('‚åõ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ...');
        await page.waitForSelector('div[role="dialog"] a[href^="/"]', { timeout: 30000 });

        let found = false;
        let usernames = [];

        for (let i = 0; i < 50; i++) {
            usernames = await page.$$eval(
                'div[role="dialog"] a[href^="/"]',
                anchors => anchors.map(a => a.textContent?.trim().toLowerCase()).filter(Boolean)
            );

            console.log(`üîé –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: –Ω–∞–π–¥–µ–Ω–æ ${usernames.length} –∏–º—ë–Ω`);

            if (usernames.includes(targetInstagram.trim().toLowerCase())) {
                found = true;
                break;
            }

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
            await page.mouse.wheel({ deltaY: 400 });
            await new Promise(r => setTimeout(r, 600));
        }

        console.log("üëÄ –ü–µ—Ä–≤—ã–µ 20 –∏–º—ë–Ω:", usernames.slice(0, 20));
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${found ? '–ü–û–î–ü–ò–°–ê–ù' : '–ù–ï –ü–û–î–ü–ò–°–ê–ù'}`);
        await browser.close();
        return found;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', err.message);
        await browser.close();
        return false;
    }
}

app.get('/check-subscription', async (req, res) => {
    const { referrer, user } = req.query;

    if (isChecking) return res.status(429).json({ error: '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–¥—ë—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.' });
    if (!referrer || !user) return res.status(400).json({ error: '‚ùó –ù—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã referrer –∏ user' });

    try {
        isChecking = true;

        const refInstagram = await getInstagram(referrer);
        const userInstagram = await getInstagram(user);

        const result = await checkIfUserFollows(refInstagram, userInstagram);
        res.json({ result });

    } catch (err) {
        res.status(500).json({ error: String(err) });
    } finally {
        isChecking = false;
    }
});

app.listen(port, () => {
    console.log(`üöÄ BOT API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port}`);
});
